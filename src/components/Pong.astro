---
import Heart from "./items/Heart.astro"
---
<menu>
    <div class="score-wrapper">
        <Heart id="4" />
        <Heart id="3" />
        <Heart id="2" />
        <Heart id="1" />
        <Heart id="0" />
        <p class="score player-one">0</p>
    </div>
    <div class="score-wrapper">
        <p class="score player-two">0</p>
        <Heart id="5" />
        <Heart id="6" />
        <Heart id="7" />
        <Heart id="8" />
        <Heart id="9" />
    </div>
</menu>
<section>
    <canvas>
        
    </canvas>
</section>

<style>
    menu {
        display: flex;
        justify-content: space-around;
    }

    .score-wrapper {
        display: flex;
        align-items: center;
        gap: 50px;
    }

    .score {
        font-size: 4rem;
        margin: 0 1rem;
    }

    section {
        display: flex;
        justify-content: center;
    } 

    canvas {
        border-top: 5px solid white;
        border-bottom: 5px solid white;
        box-sizing: border-box;
    }
</style>

<script>
    type Player = {
        x: number,
        y: number,
        width: number,
        height: number,
        velocityY: number
    }

    type Ball = Player & {
        velocityX: number
    }

    let board: HTMLCanvasElement;
    let playerOneScoreboard: HTMLParagraphElement;
    let playerTwoScoreboard: HTMLParagraphElement;
    let heartZero: HTMLDivElement;
    let heartOne: HTMLDivElement;
    let heartTwo: HTMLDivElement;
    let heartThree: HTMLDivElement;
    let heartFour: HTMLDivElement;
    let heartFive: HTMLDivElement;
    let heartSix: HTMLDivElement;
    let heartSeven: HTMLDivElement;
    let heartEight: HTMLDivElement;
    let heartNine: HTMLDivElement;
    let boardWidth: number = window.innerWidth;
    let boardHeight: number = 600;
    let context: CanvasRenderingContext2D | null;

    const playerWidth: number = 10;
    const playerHeight: number = 70;
    const playerPadding: number = 10;
    const playerVelocityY: number = 0;

    const ballWidth: number = 10;
    const ballHeight: number = 10;
    const ballVelocityY: number = 2;
    const ballVelocityX: number = -15;
    let ball: Ball = {
        x: boardWidth / 2,
        y: boardHeight / 2,
        width: ballWidth,
        height: ballHeight,
        velocityX: ballVelocityX,
        velocityY: ballVelocityY
    }

    const playerOne: Player = {
        x: playerPadding,
        y: boardHeight / 2,
        width: playerWidth,
        height: playerHeight,
        velocityY: playerVelocityY
    }
    
    let playerTwo: Player = {
        x: boardWidth - playerWidth - playerPadding,
        y: boardHeight / 2,
        width: playerWidth,
        height: playerHeight,
        velocityY: playerVelocityY
    }
    
    let playerOneScore: number = 0;
    let playerTwoScore: number = 0;

    let pointsToMatch: number = 5;
    let playerOneLives: number = 5;
    let playerTwoLives: number = 5;

    window.onload = (): void => {
        board = document.querySelector("canvas") as HTMLCanvasElement;
        playerOneScoreboard = document.querySelector(".score.player-one") as HTMLParagraphElement;
        playerTwoScoreboard = document.querySelector(".score.player-two") as HTMLParagraphElement;
        heartZero = document.querySelector("#heart-0") as HTMLDivElement;
        heartOne = document.querySelector("#heart-1") as HTMLDivElement;
        heartTwo = document.querySelector("#heart-2") as HTMLDivElement;
        heartThree = document.querySelector("#heart-3") as HTMLDivElement;
        heartFour = document.querySelector("#heart-4") as HTMLDivElement;
        heartFive = document.querySelector("#heart-5") as HTMLDivElement;
        heartSix = document.querySelector("#heart-6") as HTMLDivElement;
        heartSeven = document.querySelector("#heart-7") as HTMLDivElement;
        heartEight = document.querySelector("#heart-8") as HTMLDivElement;
        heartNine = document.querySelector("#heart-9") as HTMLDivElement;
        board.height = boardHeight;
        board.width = boardWidth;
        context = board.getContext("2d");

        if(context){
            drawPlayers();
            drawBall();
            requestAnimationFrame(update);
            document.addEventListener("keydown", movePlayer);
        }
    }

    const update = (): void => {
        requestAnimationFrame(update);

        if(context){
            context.clearRect(0, 0, board.width, board.height);
            drawPlayers();
            drawBall();

            if(detectCollision(ball, playerOne)) {
                if(ball.x <= playerOne.x + playerOne.width){
                    ball.velocityX *= -1;
                }
            } else if (detectCollision(ball, playerTwo)) {
                if(ball.x + ballWidth >= playerTwo.x) {
                    ball.velocityX *= -1;
                }
            }

            if(ball.x < 0) {
                playerTwoScore++;   
                if(playerTwoScore >= pointsToMatch) {
                    playerTwoScore = 0;
                    playerOneLives -= 1;
                    const heartSelected = getHeartLost(playerOneLives, 1);
                    if(heartSelected) {
                        lostLifeAnimation(heartSelected)
                    }
                }
                playerTwoScoreboard.innerText = String(playerTwoScore);
                resetPoint(Math.abs(ballVelocityX) * -1);
            } else if (ball.x + ballWidth > boardWidth) {
                playerOneScore++;
                if(playerOneScore >= pointsToMatch) {
                    playerOneScore = 0;
                    playerTwoLives -= 1;
                    const heartSelected = getHeartLost(playerTwoLives, 2);
                    if(heartSelected) {
                        lostLifeAnimation(heartSelected)
                    }
                }
                playerOneScoreboard.innerText = String(playerOneScore);
                resetPoint(Math.abs(ballVelocityX));
            }

            for (let i = 10; i < board.height; i += 25) {
                context.fillRect(board.width / 2 - 10, i, 5, 5);
            }
        }        
    }

    const drawPlayers = (): void => {
        if (context) {
            context.fillStyle = "white";
            const nextPlayerOneY = playerOne.y + playerOne.velocityY;
            const nextPlayerTwoY = playerTwo.y + playerTwo.velocityY;
            if(!outOfBounds(nextPlayerOneY)){
                playerOne.y = nextPlayerOneY;
            }
            if(!outOfBounds(nextPlayerTwoY)){
                playerTwo.y = nextPlayerTwoY;
            }
            context.fillRect(playerOne.x, playerOne.y, playerOne.width, playerOne.height);
            context.fillRect(playerTwo.x, playerTwo.y, playerTwo.width, playerTwo.height);
        }
    }

    const drawBall = (): void => {
        if (context) {
            context.fillStyle = "white";
            ball.x += ball.velocityX;
            ball.y += ball.velocityY;
            context.fillRect(ball.x, ball.y, ball.width, ball.height);

            if(ballHitBoundY()){
                ball.velocityY *= -1;
            }
        }
    }

    const movePlayer = (e: KeyboardEvent): void => {
        if(e.code === "KeyW"){
            playerOne.velocityY = -6
        }

        if(e.code === "KeyS"){
            playerOne.velocityY = 6
        }

        if(e.code === "ArrowUp"){
            playerTwo.velocityY = -6
        }

        if(e.code === "ArrowDown"){
            playerTwo.velocityY = 6
        }
    }

    const outOfBounds = (yPosition: number): boolean => {
        return (yPosition < 1 || yPosition + playerHeight + 1 > boardHeight)
    }

    const ballHitBoundY = (): boolean => {
        return (ball.y <= 0 || (ball.y + ball.height >= boardHeight))
    }

    const detectCollision = (a: Ball, b: Player): boolean => {
        return a.x < b.x + b.width && a.x + a.width > b.x && a.y < b.y + b.height && a.y + a.height > b.y;
    }

    const resetPoint = (direction: number): void => {
        const randomYDirection: number = Math.random() < 0.5 ? 1 : -1;
        
        ball = {
            x: boardWidth / 2,
            y: boardHeight / 2,
            width: ballWidth,
            height: ballHeight,
            velocityX: direction,
            velocityY: ballVelocityY * randomYDirection
        }
    }

    const lostLifeAnimation = (heart: HTMLDivElement):void => {
        if(heart) {
            const loops: number = 5;

            for(let i = 0; i < loops; i++) {
                setTimeout((): void => {
                    heart.classList.toggle("heart");
                    heart.classList.toggle("reversed-heart");
                }, 300 * i);
            }
        }
    }

    const getHeartLost = (playerScore: number, player: number ): HTMLDivElement | undefined => {
        if(player === 1) {
            switch (playerScore) {
                case 0:
                    return heartZero;
                case 1:
                    return heartOne;
                case 2:
                    return heartTwo;
                case 3:
                    return heartThree;
                case 4:
                    return heartFour;

            }
        } else if (player === 2) {
            switch (playerScore) {
                case 0:
                    return heartFive;
                case 1:
                    return heartSix;
                case 2:
                    return heartSeven;
                case 3:
                    return heartEight;
                case 4:
                    return heartNine;

            }
        }
    }
    
</script>