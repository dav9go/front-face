---
import Button from "./tags/Button.astro"
---

<section>
    <h1>SOFTWARE DEVELOPER</h1>
    <div class="node-wrapper">
        <p>WORLD CLASS QUALITY - REACT DEVELOPER</p>
    </div>
    <div class="node-wrapper">
        <p>FIRST UPLOAD 01 NOV 2024 - LATEST UPDATE 12 DEC 2024</p>
    </div>
    <div>
        <Button text="This effect is annoying me &uarr;" id="effect-annoying" />
    </div>
</section>

<style>
    h1 {
        font-size: 5rem;
        text-align: center;
    }

    p {
        font-size: 3rem;
        margin: 0;
        position: absolute;
        top: 50%;
        width: max-content;
        transition: all 16s cubic-bezier(0.075, 0.82, 0.165, 1);
    }

    div:nth-of-type(3){
        display: grid;
        place-items: center;
        margin: 2rem
    }

    .node-wrapper:first-of-type > p {
        left: 50%;
        transform: translateY(-50%) translateX(-50%);
    }

    .node-wrapper:nth-of-type(2) > p {
        right: 50%;
        transform: translateY(-50%) translateX(50%);
    }

    .node-wrapper {
        position: relative;
        height: 75px;
    }
</style>

<script>
    const firstNode = document.querySelector<HTMLElement>(".node-wrapper:first-of-type > p");
    const secondNode = document.querySelector<HTMLElement>(".node-wrapper:nth-of-type(2) > p");
    const annoyingButton = document.querySelector<HTMLButtonElement>("#effect-annoying");
    const wantAnnoyingEffect: string | null = localStorage.getItem("annoying-effect");
    let animationFrameId: number;

    if(wantAnnoyingEffect === "false") {
        document.onmousemove = null;
        document.onmouseout = null;
    } else {
        document.onmousemove = (event: MouseEvent): void => {
        const x: string = event.clientX * 100 / window.innerWidth + "%";

        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
        }

        animationFrameId = requestAnimationFrame(() => {
                if (firstNode && secondNode) {
                    firstNode.style.left = x;
                    secondNode.style.right = x;
                }
            });
        }

        document.onmouseout = (): void => {
            stopAnimation();
        }
    }

    const stopAnimation = (): void => {
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
        }

        animationFrameId = requestAnimationFrame(() => {
            if(firstNode && secondNode){
                firstNode.style.left = "50%";
                secondNode.style.right = "50%";
            }
        });
    }

    if(annoyingButton) {
        annoyingButton.onclick = (): void => {
            localStorage.setItem("annoying-effect", "false");
            stopAnimation();
            document.onmousemove = null;
        }
    }
</script>
