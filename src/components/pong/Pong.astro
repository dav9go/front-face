---
import PongASCII from "./PongASCII.astro"
import Heart from "../items/Heart.astro"
import Finished from "./Finished.astro"
import Level from "./Level.astro"
import Start from "./Start.astro"
---

<PongASCII />
<p>Yet another pong game</p>
<menu>
    <div class="score-wrapper">
        <Heart id="4" />
        <Heart id="3" />
        <Heart id="2" />
        <Heart id="1" />
        <Heart id="0" />
        <p class="score player-one">0</p>
    </div>
    <Level />
    <div class="score-wrapper">
        <p class="score player-two">0</p>
        <div class="score-wrapper player-two">
            <Heart id="5" />
            <Heart id="6" />
            <Heart id="7" />
            <Heart id="8" />
            <Heart id="9" />
        </div>
    </div>
</menu>
<section>
    <canvas>
        
    </canvas>
    <Start/>
    <Finished />
</section>

<style>
    menu {
        display: flex;
        justify-content: space-around;
        position: relative;
        margin: 3rem 0;
    }

    .score-wrapper {
        display: flex;
        align-items: center;
        gap: 50px;
    }

    .score-wrapper.player-two {
        transform: translateX(-30px); /*Heart's width*/
    }

    .score {
        font-size: 4rem;
        margin: 0 1rem;
    }

    section {
        display: flex;
        justify-content: center;
        position: relative;
    } 

    canvas {
        border-top: 5px solid white;
        border-bottom: 5px solid white;
        box-sizing: border-box;
    }

    p {
        text-align: center;
        margin: -2rem 0 2rem 0;
    }
</style>

<style is:global>
    .restart-wrapper {
        position: absolute;
        top: 42.5%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        flex-direction: column;
        align-items: center;
        display: none;
    }

    .start-game-wrapper {
        position: absolute;
        top: 42.5%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

</style>

<script>
    type Player = {
        x: number,
        y: number,
        width: number,
        height: number,
        velocityY: number
    }

    type Ball = Player & {
        velocityX: number
    }

    let started: boolean = false;
    let level: number = 1;
    let levelMultiplier: number = 1.7;

    let board: HTMLCanvasElement;
    let levelDiv: HTMLDivElement;
    let playerOneScoreboard: HTMLParagraphElement;
    let playerTwoScoreboard: HTMLParagraphElement;
    let finishWrapper: HTMLDivElement;
    let startWrapper: HTMLDivElement;
    let restartButton: HTMLButtonElement;
    let startButton: HTMLButtonElement;
    let heartZero: HTMLDivElement;
    let heartOne: HTMLDivElement;
    let heartTwo: HTMLDivElement;
    let heartThree: HTMLDivElement;
    let heartFour: HTMLDivElement;
    let heartFive: HTMLDivElement;
    let heartSix: HTMLDivElement;
    let heartSeven: HTMLDivElement;
    let heartEight: HTMLDivElement;
    let heartNine: HTMLDivElement;
    let boardWidth: number = window.innerWidth;
    let boardHeight: number = 600;
    let context: CanvasRenderingContext2D | null;

    const playerWidth: number = 10;
    const playerHeight: number = 70;
    const playerPadding: number = 10;
    const playerVelocityY: number = 0;

    const ballWidth: number = 20;
    const ballHeight: number = 10;
    const ballVelocityY: number = 2;
    const ballVelocityX: number = -15;

    const initialBall: Ball = {
        x: boardWidth / 2,
        y: boardHeight / 2,
        width: ballWidth,
        height: ballHeight,
        velocityX: ballVelocityX,
        velocityY: ballVelocityY
    }

    const initialPlayerOne: Player = {
        x: playerPadding,
        y: boardHeight / 2,
        width: playerWidth,
        height: playerHeight,
        velocityY: playerVelocityY
    }

    const initialPlayerTwo: Player = {
        x: boardWidth - playerWidth - playerPadding,
        y: boardHeight / 2,
        width: playerWidth,
        height: playerHeight,
        velocityY: playerVelocityY
    } 

    let ball: Ball = initialBall;
    let playerOne: Player =  initialPlayerOne;
    let playerTwo: Player = initialPlayerTwo;
    
    const initialPlayersScore: number = 0;
    let playerOneScore: number = initialPlayersScore;
    let playerTwoScore: number = initialPlayersScore;

    const initialPlayersLives: number = 5;
    let pointsToMatch: number = 3;
    let playerOneLives: number = initialPlayersLives;
    let playerTwoLives: number = initialPlayersLives;

    let timeoutsIds: number[] = [];

    window.onload = (): void => {
        board = document.querySelector("canvas") as HTMLCanvasElement;
        levelDiv = document.querySelector(".level") as HTMLDivElement;
        playerOneScoreboard = document.querySelector(".score.player-one") as HTMLParagraphElement;
        playerTwoScoreboard = document.querySelector(".score.player-two") as HTMLParagraphElement;
        finishWrapper = document.querySelector(".restart-wrapper") as HTMLDivElement;
        startWrapper = document.querySelector(".start-game-wrapper") as HTMLDivElement;
        restartButton = document.querySelector("#restart-button") as HTMLButtonElement;
        startButton = document.querySelector("#start-button") as HTMLButtonElement;
        heartZero = document.querySelector("#heart-0") as HTMLDivElement;
        heartOne = document.querySelector("#heart-1") as HTMLDivElement;
        heartTwo = document.querySelector("#heart-2") as HTMLDivElement;
        heartThree = document.querySelector("#heart-3") as HTMLDivElement;
        heartFour = document.querySelector("#heart-4") as HTMLDivElement;
        heartFive = document.querySelector("#heart-5") as HTMLDivElement;
        heartSix = document.querySelector("#heart-6") as HTMLDivElement;
        heartSeven = document.querySelector("#heart-7") as HTMLDivElement;
        heartEight = document.querySelector("#heart-8") as HTMLDivElement;
        heartNine = document.querySelector("#heart-9") as HTMLDivElement;
        board.height = boardHeight;
        board.width = boardWidth;
        context = board.getContext("2d");

        startButton.onclick = (): void => {
            startWrapper.style.display = "none";
            startGame();
        }

        if(context){
            if(started) {
                startGame();
            } 
        }
    }

    const startGame = (): void => {
        requestAnimationFrame(update);
        document.addEventListener("keydown", movePlayer);
    }

    const update = (): void => {
        requestAnimationFrame(update);

        if(context){
            context.clearRect(0, 0, board.width, board.height);
            if(playerOneLives <= 0 || playerTwoLives <= 0) {
                finishWrapper.style.display = "flex";
                restartButton.onclick = (): void => {
                    ball = initialBall;
                    playerOne =  initialPlayerOne;
                    playerTwo = initialPlayerTwo;
                    playerOneScore = initialPlayersScore;
                    playerTwoScore = initialPlayersScore;
                    playerOneLives = initialPlayersLives;
                    playerTwoLives = initialPlayersLives;
                    playerOneScoreboard.innerText = String(initialPlayersScore);
                    playerTwoScoreboard.innerText = String(initialPlayersScore);
                    level = 1;
                    resetHearts();
                    if(timeoutsIds.length > 0) {
                        timeoutsIds.forEach((id) => {
                            clearTimeout(id);
                        })
                    }
                    finishWrapper.style.display = "none";
                }
            } else {
                drawPlayers();
                drawBall();
                setLevel();

                if(detectCollision(ball, playerOne)) {
                    if(ball.x <= playerOne.x + playerOne.width){
                        ball.velocityX *= -1;
                    }
                } else if (detectCollision(ball, playerTwo)) {
                    if(ball.x + ballWidth >= playerTwo.x) {
                        ball.velocityX *= -1;
                    }
                }

                if(ball.x < 0) {
                    playerTwoMakesPoint();
                } else if (ball.x + ballWidth > boardWidth) {
                    playerOneMakesPoint();
                }

                for (let i = 10; i < board.height; i += 25) {
                    context.fillRect(board.width / 2 - 10, i, 5, 5);
                }
            }
        }        
    }

    const setLevel = (): void => {
        switch (playerTwoLives) {
            case 1:
                level = 5;
                levelDiv.classList.remove("level-4");
                levelDiv.classList.add("level-5");
                break;
            case 2:
                level = 4;
                levelDiv.classList.remove("level-3");
                levelDiv.classList.add("level-4");
                break;
            case 3:
                level = 3;
                levelDiv.classList.remove("level-2");
                levelDiv.classList.add("level-3");
                break;
            case 4:
                level = 2;
                levelDiv.classList.remove("level-1");
                levelDiv.classList.add("level-2");
                break;
            default:
                level = 1;
                levelDiv.classList.add("level-1");
                levelDiv.classList.remove("level-2");
                levelDiv.classList.remove("level-3");
                levelDiv.classList.remove("level-4");
                levelDiv.classList.remove("level-5");
        }
    }

    const playerOneMakesPoint = (): void => {
        playerOneScore++;
        if(playerOneScore >= pointsToMatch) {
            playerOneScore = 0;
            playerTwoLives -= 1;
            const heartSelected = getHeartLost(playerTwoLives, 2);
            if(heartSelected) {
                lostLifeAnimation(heartSelected)
            }
        }
        playerOneScoreboard.innerText = String(playerOneScore);
        resetPoint(Math.abs(ballVelocityX));
    }

    const playerTwoMakesPoint = (): void => {
        playerTwoScore++;   
        if(playerTwoScore >= pointsToMatch) {
            playerTwoScore = 0;
            playerOneLives -= 1;
            const heartSelected = getHeartLost(playerOneLives, 1);
            if(heartSelected) {
                lostLifeAnimation(heartSelected)
            }
        }
        playerTwoScoreboard.innerText = String(playerTwoScore);
        resetPoint(Math.abs(ballVelocityX) * -1);
    }

    const drawPlayers = (): void => {
        if (context) {
            context.fillStyle = "white";
            const nextPlayerOneY = playerOne.y + playerOne.velocityY;
            const nextPlayerTwoY = playerTwo.y + playerTwo.velocityY;
            if(!outOfBounds(nextPlayerOneY)){
                playerOne.y = nextPlayerOneY;
            }
            if(!outOfBounds(nextPlayerTwoY)){
                playerTwo.y = nextPlayerTwoY;
            }
            context.fillRect(playerOne.x, playerOne.y, playerOne.width, playerOne.height);
            context.fillRect(playerTwo.x, playerTwo.y, playerTwo.width, playerTwo.height);
        }
    }

    const drawBall = (): void => {
        if (context) {
            context.fillStyle = "white";
            const levelSpeed = level === 1 || level === 2 ? 1 : (level / 5) * levelMultiplier;
            ball.x += ball.velocityX * levelSpeed;
            ball.y += ball.velocityY * levelSpeed;
            context.fillRect(ball.x, ball.y, ball.width, ball.height);

            if(ballHitBoundY()){
                ball.velocityY *= -1;
            }
        }
    }

    const movePlayer = (e: KeyboardEvent): void => {
        if(e.code === "KeyW"){
            playerOne.velocityY = -6
        }

        if(e.code === "KeyS"){
            playerOne.velocityY = 6
        }

        if(e.code === "KeyI"){
            playerTwo.velocityY = -6
        }

        if(e.code === "KeyK"){
            playerTwo.velocityY = 6
        }
    }

    const outOfBounds = (yPosition: number): boolean => {
        return (yPosition < 1 || yPosition + playerHeight + 1 > boardHeight)
    }

    const ballHitBoundY = (): boolean => {
        return (ball.y <= 0 || (ball.y + ball.height >= boardHeight))
    }

    const detectCollision = (a: Ball, b: Player): boolean => {
        return a.x < b.x + b.width && a.x + a.width > b.x && a.y < b.y + b.height && a.y + a.height > b.y;
    }

    const resetPoint = (direction: number): void => {
        const randomYDirection: number = Math.random() < 0.5 ? 1 : -1;
        
        ball = {
            x: boardWidth / 2,
            y: boardHeight / 2,
            width: ballWidth,
            height: ballHeight,
            velocityX: direction,
            velocityY: ballVelocityY * randomYDirection
        }
    }

    const lostLifeAnimation = (heart: HTMLDivElement): void => {
        if(heart) {
            const loops: number = 5;

            for(let i = 0; i < loops; i++) {
                const timeout = setTimeout((): void => {
                    heart.classList.toggle("heart");
                    heart.classList.toggle("reversed-heart");
                    if(i === loops - 1) {
                        timeoutsIds = [];
                    }
                }, 300 * i);
                timeoutsIds.push(timeout);
            }
        }
    }

    const resetHearts = (): void => {
        const allHearts: HTMLDivElement[] = [heartZero, heartOne, heartTwo, heartThree, heartFour, heartFive, heartSix, heartSeven, heartEight, heartNine];
        allHearts.forEach((heart) => {
        heart.classList.add("heart");
        heart.classList.remove("reversed-heart");
    });
    }

    const getHeartLost = (playerScore: number, player: number ): HTMLDivElement | undefined => {
        if(player === 1) {
            switch (playerScore) {
                case 0:
                    return heartZero;
                case 1:
                    return heartOne;
                case 2:
                    return heartTwo;
                case 3:
                    return heartThree;
                case 4:
                    return heartFour;

            }
        } else if (player === 2) {
            switch (playerScore) {
                case 0:
                    return heartFive;
                case 1:
                    return heartSix;
                case 2:
                    return heartSeven;
                case 3:
                    return heartEight;
                case 4:
                    return heartNine;

            }
        }
    }
    
</script>